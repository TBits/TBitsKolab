diff --git a/pykolab/auth/ldap/__init__.py b/pykolab/auth/ldap/__init__.py
index bc4f5fd..4b5f876 100644
--- a/pykolab/auth/ldap/__init__.py
+++ b/pykolab/auth/ldap/__init__.py
@@ -51,6 +51,8 @@ from pykolab.translate import _ as _l
 import auth_cache
 import cache
 
+from pykolab import wap_client
+
 # pylint: disable=invalid-name
 log = pykolab.getLogger('pykolab.auth')
 conf = pykolab.getConf()
@@ -98,7 +100,23 @@ class LDAP(Base):
 
             Called from pykolab.auth.Auth, the realm parameter is derived, while
             login[3] preserves the originally specified realm.
-        """
+
+            If unique_uid_across_domains is defined as true,
+            and username is not an email address,
+            and the username is unique across all domains,
+            then the domain is determined that contains this username
+            and used as the realm
+        """
+
+        if conf.get('kolab', 'unique_uid_across_domains') == "true":
+            if ((not "@" in login[0])
+                    and (login[0] != 'cyrus-admin')
+                    and (realm == conf.get('kolab', 'primary_domain'))):
+                wap_client.authenticate()
+                userdomain = wap_client.user_get_domain(login[0])
+                if userdomain != False and not userdomain['domain'] is None:
+                    realm = userdomain['domain']
+                    self.domain = userdomain['domain']
 
         try:
             log.debug(
diff --git a/pykolab/wap_client/__init__.py b/pykolab/wap_client/__init__.py
index 900e280..0b1e002 100644
--- a/pykolab/wap_client/__init__.py
+++ b/pykolab/wap_client/__init__.py
@@ -624,6 +624,16 @@ def user_find(attribs=None):
 
     return user
 
+
+def user_get_domain(user=None):
+    if user is None:
+        user = utils.ask_question("User unique id")
+
+    _params = {'id': user}
+
+    return request('GET', 'user.get_domain', get=_params)
+
+
 def user_form_value_generate(params=None):
     if params == None:
         params = get_user_input()
