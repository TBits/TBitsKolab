diff --git a/pykolab/auth/ldap/__init__.py b/pykolab/auth/ldap/__init__.py
index c0c3297..0bfcac7 100644
--- a/pykolab/auth/ldap/__init__.py
+++ b/pykolab/auth/ldap/__init__.py
@@ -335,6 +335,11 @@
                     self._disconnect()
                     return False
 
+                # store current unix time in last login
+                self.bind = False
+                if self.config_get('setlastlogin') == "True" and not "uid=cyrus-admin" in entry_dn:
+                    self.set_entry_attribute(entry_dn, "tbitsKolabLastLogin", str(int(time.time())))
+
                 try:
                     auth_cache.set_entry(_filter, entry_dn)
                 except Exception, errmsg:
@@ -379,6 +384,11 @@
                     self._disconnect()
                     return False
 
+                # store current unix time in last login
+                self.bind = False
+                if self.config_get('setlastlogin') == "True" and not "uid=cyrus-admin" in entry_dn:
+                    self.set_entry_attribute(entry_dn, "tbitsKolabLastLogin", str(int(time.time())))
+
                 auth_cache.set_entry(_filter, entry_dn)
 
             except ldap.NO_SUCH_OBJECT, errmsg:
diff --git a/pykolab/auth/ldap/auth_cache.py b/pykolab/auth/ldap/auth_cache.py
index 831e444..d1c6057 100644
--- a/pykolab/auth/ldap/auth_cache.py
+++ b/pykolab/auth/ldap/auth_cache.py
@@ -53,6 +53,7 @@ log = pykolab.getLogger('pykolab.auth_cache')
 metadata = MetaData()
 
 db = None
+last_purge = None
 
 ##
 ## Classes
@@ -150,7 +151,9 @@ def set_entry(key, value):
         db.commit()
 
 def purge_entries(db):
-    db.query(Entry).filter(Entry.last_change <= (datetime.datetime.now() - datetime.timedelta(1))).delete()
+    global last_purge
+    last_purge = datetime.datetime.now()
+    db.query(Entry).filter(Entry.last_change <= (datetime.datetime.now() - datetime.timedelta(hours=1))).delete()
     db.commit()
 
 def init_db(reinit=False):
@@ -158,8 +161,11 @@ def init_db(reinit=False):
         Returns a SQLAlchemy Session() instance.
     """
     global db
+    global last_purge
 
     if not db == None and not reinit:
+        if last_purge <= (datetime.datetime.now() - datetime.timedelta(hours=1)):
+            purge_entries(db)
         return db
 
     db_uri = conf.get('ldap', 'auth_cache_uri')
