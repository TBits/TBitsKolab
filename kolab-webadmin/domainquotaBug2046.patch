diff --git a/lib/Auth.php b/lib/Auth.php
index 37885be..53c1d8d 100644
--- a/lib/Auth.php
+++ b/lib/Auth.php
@@ -231,6 +231,11 @@ class Auth {
         return $this->auth_instance()->domainadmin_get_configuration($domain, $variablename);
     }
 
+    public function domainadmin_get_user_quota($domainadmin, $excludeuser)
+    {
+        return $this->auth_instance()->domainadmin_get_user_quota($domainadmin, $excludeuser);
+    }
+
     public function find_recipient($address)
     {
         return $this->auth_instance()->find_recipient($address);
diff --git a/lib/Auth/LDAP.php b/lib/Auth/LDAP.php
index 6ad01c3..5f3f406 100644
--- a/lib/Auth/LDAP.php
+++ b/lib/Auth/LDAP.php
@@ -392,6 +392,30 @@ class LDAP extends Net_LDAP3 {
         return $domain_dn;
     }
 
+    // get the quota that has already been shared among the users of the domains that this domainadmin manages.
+    // excluding the current quota for the specified user, that we want to change the quota for
+    public function domainadmin_get_user_quota($domainadmin, $excludeuser)
+    {
+        $quota = 0;
+        $domains = $this->domainadmin_get_domains($domainadmin);
+        foreach ($domains as $domain) {
+            // get all users that are part of this domain
+            $users_result = $this->search(
+                               $this->_standard_root_dn($domain),
+                               "objectclass=kolabinetorgperson");
+            if ($users_result != null && count($users_result) > 0) {
+               $users = $users_result->entries(true);
+               foreach ($users as $uid => $user) {
+                   if (strtolower($uid) != strtolower($excludeuser)) {
+                       $quota += $user[$this->conf->get("quota_attribute")];
+                   }
+               }
+            }
+        }
+
+        return $quota;
+    }
+
     public function domain_edit($domain, $attributes, $typeid = null)
     {
         $domain = $this->domain_info($domain, array_keys($attributes));
diff --git a/lib/api/kolab_api_service_form_value.php b/lib/api/kolab_api_service_form_value.php
index 16475db..660c6eb 100644
--- a/lib/api/kolab_api_service_form_value.php
+++ b/lib/api/kolab_api_service_form_value.php
@@ -1239,7 +1239,71 @@ class kolab_api_service_form_value extends kolab_api_service
 
     private function validate_mailquota($value, $postdata = array(), $validation_type = null)
     {
-        return $this->validate_quota($value, $postdata, $validation_type);
+        $value = $this->validate_quota($value, $postdata, $validation_type);
+
+        if (empty($value)) {
+            $value = 0;
+        }
+
+        if (!is_numeric($value)) {
+            throw new Exception('Invalid value for mail quota. Please clear or enter a valid integer number!');
+        }
+
+        $value = intval($value);
+
+        $conf = Conf::get_instance();
+        $quota_attribute = $conf->get('domainadmin_quota_attribute');
+        if ($quota_attribute == null || strlen($quota_attribute) == 0) {
+          $quota_attribute = $conf->get('quota_attribute');
+        }
+        // check domain admin quota
+
+        $auth = Auth::get_instance();
+            
+        // get the mailquota of the domain admin for the current domain
+        $result = $auth->domainadmin_get_configuration($_SESSION['user']->get_domain(), $quota_attribute);
+
+        if (isset($result)) {
+            $domainadminquota = $result[$quota_attribute];
+
+            if ($value == 0 && $domainadminquota != 0) {
+                throw new Exception('error: You must specify a mailquota for the user. <br/>'.
+                      'An unlimited mailquota is not permitted for your user because you have a limited overall mailquota.');
+            }
+
+            $domainadmin = $result['domainadmin'];
+            // get all quotas from all users of that domain admin, excluding this user
+            $quota_used = $auth->domainadmin_get_user_quota($domainadmin, 'uid='.$postdata['uid'].','.$postdata['ou']);
+
+            // check if existing quota plus this new quota would still fit the quota of the domain admin
+            if ($quota_used + $value > $domainadminquota) {
+                $available = $domainadminquota - $quota_used;
+                $domainadminquotaunit = "KB";
+                if ($domainadminquota > 1024) {
+                    $domainadminquota = $domainadminquota / 1024;
+                    $domainadminquotaunit = "MB";
+                }
+                if ($domainadminquota > 1024) {
+                    $domainadminquota = $domainadminquota / 1024;
+                    $domainadminquotaunit = "GB";
+                }
+                $availableunit = "KB";
+                if ($available > 1024) {
+                    $available = $available / 1024;
+                    $availableunit = "MB";
+                }
+                if ($available > 1024) {
+                    $available = $available / 1024;
+                    $availableunit = "GB";
+                }
+
+                throw new Exception('error: mailquota of the domain admin has been exceeded. <br/>'.
+                     'max available: '.$domainadminquota.' '.$domainadminquotaunit.';<br/> '.
+                     'max available for this user: '.$available.' '.$availableunit);
+            }
+        }
+
+        return (string) intval($value);
     }
 
     private function validate_tbitskolaboverallquota($value, $postdata = array(), $validation_type = null)
--- a/public_html/js/kolab_admin.js	2014-02-11 11:37:44.000000000 +0100
+++ b/public_html/js/kolab_admin.js	2014-07-11 14:44:12.623960515 +0200
@@ -819,6 +819,8 @@
       var unit = $('select[name="' + this.name + '-unit"]').val();
       if (unit && this.value)
         data.json[this.name] = this.value + unit;
+      if (!this.value)
+        data.json[this.name] = "0kb";
       delete data.json[this.name + '-unit'];
     });
 
