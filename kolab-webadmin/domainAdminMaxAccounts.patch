diff --git a/lib/Auth.php b/lib/Auth.php
index 53c1d8d..d464fdf 100644
--- a/lib/Auth.php
+++ b/lib/Auth.php
@@ -196,6 +196,11 @@ class Auth {
         return $this->auth_instance()->domain_add($domain, $domain_attrs);
     }
 
+    public function domainadmin_get_number_of_accounts($domainadmin)
+    {
+        return $this->auth_instance()->domainadmin_get_number_of_accounts($domainadmin);
+    }
+
     public function domain_edit($domain, $attributes, $typeid = null)
     {
         return $this->auth_instance()->domain_edit($domain, $attributes, $typeid);
diff --git a/lib/Auth/LDAP.php b/lib/Auth/LDAP.php
index 5f3f406..aafe618 100644
--- a/lib/Auth/LDAP.php
+++ b/lib/Auth/LDAP.php
@@ -417,6 +417,25 @@ class LDAP extends Net_LDAP3 {
         return $quota;
     }
 
+    // get the number of accounts that this domainadmin manages.
+    public function domainadmin_get_number_of_accounts($domainadmin)
+    {
+        $numberOfAccounts = 0;
+        $domains = $this->domainadmin_get_domains($domainadmin);
+        foreach ($domains as $domain) {
+            // get all users that are part of this domain; the domainadmin itself is not of class mailrecipient
+            $users_result = $this->search(
+                               $this->_standard_root_dn($domain),
+                               "objectclass=mailrecipient");
+            if ($users_result != null && count($users_result) > 0) {
+               $users = $users_result->entries(true);
+               $numberOfAccounts += count($users);
+            }
+        }
+
+        return $numberOfAccounts;
+    }
+
     public function domain_edit($domain, $attributes, $typeid = null)
     {
         $domain = $this->domain_info($domain, array_keys($attributes));
diff --git a/lib/api/kolab_api_service_user.php b/lib/api/kolab_api_service_user.php
index 79dcb59..1cbce61 100644
--- a/lib/api/kolab_api_service_user.php
+++ b/lib/api/kolab_api_service_user.php
@@ -70,6 +70,34 @@
     }
 
     /**
+     * check if the domain admin is allowed to add another account.
+     * using tbitsKolabMaxAccounts from LDAP
+     *
+     * @throws an exception if maximum number of accounts has been reached
+     */
+    private function validate_user_add()
+    {
+        $auth = Auth::get_instance();
+        $conf = Conf::get_instance();
+
+        // get the domain admin that is defined closest to this domain (least number of accounts)
+        // and get the number of accounts that this domain admin has booked
+        $result = $auth->domainadmin_get_configuration($_SESSION['user']->get_domain(), 'tbitskolabmaxaccounts');
+ 
+        if (!empty($result)) {
+            $domainadmin = $result['domainadmin'];
+            $bookedaccounts = $result['tbitskolabmaxaccounts'];
+            $numberOfAccounts = $auth->domainadmin_get_number_of_accounts($domainadmin);
+            if ($numberOfAccounts >= $bookedaccounts) {
+                  throw new Exception('error: Cannot create another account.<br/>'.
+                      'maximum accounts booked: '.$bookedaccounts.'<br/>'.
+                      'for DomainAdmin '.$domainadmin.'<br/>'.
+                      'Please order more accounts!');
+            }
+        }
+    }
+
+    /**
      * Create user.
      *
      * @param array $get   GET parameters
@@ -81,6 +123,9 @@
     {
         Log::trace("user_add()", $postdata);
 
+        // check if the domainadmin is allowed to add more accounts
+        $this->validate_user_add();
+
         $attributes = $this->parse_input_attributes('user', $postdata);
 
         password_policy::validate_password($attributes['userpassword']);

