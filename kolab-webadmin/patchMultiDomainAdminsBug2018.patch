diff --git a/lib/Auth.php b/lib/Auth.php
index de98433..1146b8d 100644
--- a/lib/Auth.php
+++ b/lib/Auth.php
@@ -223,6 +223,16 @@ class Auth {
         return $this->auth_instance()->domain_is_empty($domain);
     }
 
+    public function domainadmin_get_domains($domainadmin)
+    {
+        return $this->auth_instance()->domainadmin_get_domains($domainadmin);
+    }
+
+    public function domainadmin_get_configuration($domain, $variablename)
+    {
+        return $this->auth_instance()->domainadmin_get_configuration($domain, $variablename);
+    }
+
     public function find_recipient($address)
     {
         return $this->auth_instance()->find_recipient($address);
diff --git a/lib/Auth/LDAP.php b/lib/Auth/LDAP.php
index 4bf2a8f..96d7481 100644
--- a/lib/Auth/LDAP.php
+++ b/lib/Auth/LDAP.php
@@ -146,6 +146,22 @@ class LDAP extends Net_LDAP3 {
         $_SESSION['user']->user_bind_dn = $result;
         $_SESSION['user']->user_bind_pw = $password;
 
+        # if the user does not have access to the default domain, set another domain
+        $domains = $this->list_domains();
+        $domain = "";
+        foreach ($domains['list'] as $key => $value) {
+            $domain = $value['associateddomain'];
+            if (is_array($domain)) {
+               $domain = $domain[0];
+            }
+            
+            if ($domain == $this->domain) {
+                break;
+            }
+        }
+
+        $_SESSION['user']->set_domain($domain);
+
         return $result;
     }
 
@@ -185,6 +201,9 @@ class LDAP extends Net_LDAP3 {
             array_unshift($attributes[$domain_name_attribute], $domain);
         }
 
+        $attributes_domainadmin = $attributes["domainadmin"];
+        unset($attributes["domainadmin"]);
+
         $domain_dn = $domain_name_attribute . '=' . $domain . ',' . $domain_base_dn;
 
         if (!empty($attributes['inetdomainbasedn'])) {
@@ -246,6 +265,7 @@ class LDAP extends Net_LDAP3 {
         if (in_array('kolabInetOrgPerson', $this->classes_allowed())) {
              $self_attrs = array_merge($self_attrs, array('kolabDelegate', 'kolabInvitationPolicy', 'kolabAllowSMTPSender'));
         }
+        $admin_readonly_attrs = array("tbitsKolabMaxAccounts", "tbitsKolabOverallQuota");
 
         $_domain = str_replace('.', '_', $domain);
         $dn      = $inetdomainbasedn;
@@ -289,7 +309,7 @@ class LDAP extends Net_LDAP3 {
                     // Self-modification
                     "(targetattr = \"" . implode(" || ", $self_attrs) . "\")(version 3.0; acl \"Enable self write for common attributes\"; allow (read,compare,search,write) userdn=\"ldap:///self\";)",
                     // Directory Administrators
-                    "(targetattr = \"*\")(version 3.0; acl \"Directory Administrators Group\"; allow (all) (groupdn=\"ldap:///cn=Directory Administrators,{$inetdomainbasedn}\" or roledn=\"ldap:///cn=kolab-admin,{$inetdomainbasedn}\");)",
+                    "(targetattr != \"". implode(" || ", $admin_readonly_attrs) . "\")(version 3.0; acl \"Directory Administrators Group\"; allow (all) (groupdn=\"ldap:///cn=Directory Administrators,{$inetdomainbasedn}\" or roledn=\"ldap:///cn=kolab-admin,{$inetdomainbasedn}\");)",
                     // Configuration Administrators
                     "(targetattr = \"*\")(version 3.0; acl \"Configuration Administrators Group\"; allow (all) groupdn=\"ldap:///cn=Configuration Administrators,ou=Groups,ou=TopologyManagement,o=NetscapeRoot\";)",
                     // Administrator users
@@ -385,6 +405,10 @@ class LDAP extends Net_LDAP3 {
             $this->add_entry($dn, $attrs);
         }
 
+        if (!$this->domain_admin_save($domain, $domain_dn, $attributes_domainadmin)) {
+            return false;
+        }
+
         return $domain_dn;
     }
 
@@ -398,6 +422,18 @@ class LDAP extends Net_LDAP3 {
 
         $domain_dn = key($domain);
 
+        # using isset, because if the array is empty, then we want to drop the domain admins.
+        if (isset($attributes["domainadmin"])) {
+            if (!$this->domain_admin_save($domain, $domain_dn, $attributes["domainadmin"])) {
+                return false;
+            }
+            unset($attributes["domainadmin"]);
+        }
+
+        // unset the domainadmin and aci values in the original value, to avoid problems during ldap modify
+        unset($domain[$domain_dn]["domainadmin"]);
+        unset($domain[$domain_dn]["aci"]);
+
         // We should start throwing stuff over the fence here.
         return $this->modify_entry($domain_dn, $domain[$domain_dn], $attributes);
     }
@@ -449,6 +485,36 @@ class LDAP extends Net_LDAP3 {
             $result = $this->_read($domain_dn, $attributes);
         }
 
+        if ($result) {
+            if (!$domain_dn) {
+                $domain_dn=array_shift(array_keys($result));
+            }
+
+            if (isset($result[$domain_dn]["associateddomain"])) {
+                $currentdomain_dn = $this->_standard_root_dn($result[$domain_dn]["associateddomain"]);
+            } else {
+                $currentdomain_dn = $domain_dn;
+            }
+
+            $currentdomain_da_dn = "cn=Directory Administrators,".$currentdomain_dn;
+
+            $domain_admins_result = $this->search($currentdomain_dn, "cn=Directory Administrators*", array("uniqueMember"));
+            if ($domain_admins_result != null && count($domain_admins_result) > 0) {
+                $domain_admins = $domain_admins_result->entries(true);
+            }
+
+            // read domain admins from LDAP, uniqueMembers of Directory Administrators of domain
+            $result[$domain_dn]["domainadmin"] = array();
+            if (is_array($domain_admins[$currentdomain_da_dn]["uniquemember"])) {
+                foreach ($domain_admins[$currentdomain_da_dn]["uniquemember"] as $domainadmin) {
+                    $result[$domain_dn]["domainadmin"][] = $domainadmin;
+                }
+            }
+            else {
+                $result[$domain_dn]["domainadmin"][] = $domain_admins[$currentdomain_da_dn]["uniquemember"];
+            }
+        }
+
         $this->_log(LOG_DEBUG, "Auth::LDAP::domain_info() result: " . var_export($result, true));
 
         return $result ? $result : false;
@@ -986,6 +1052,10 @@ class LDAP extends Net_LDAP3 {
 
         $user_dn = key($user);
 
+#        if (empty($attributes['tbitskolabisdomainadmin'])) {
+#            $attributes['tbitskolabisdomainadmin'] = $user[$user_dn]['tbitskolabisdomainadmin'];
+#        }
+
         // We should start throwing stuff over the fence here.
         $result = $this->modify_entry($user_dn, $user[$user_dn], $attributes);
 
@@ -996,8 +1066,24 @@ class LDAP extends Net_LDAP3 {
                 $pass = $result['replace']['userpassword'];
                 $_SESSION['user']->user_bind_pw = is_array($pass) ? implode($pass) : $pass;
             }
+
+            $domain_dn = key($result);
         }
 
+#        if (!empty($result) && !empty($result['replace']) && !empty($result['replace']['tbitskolabisdomainadmin']) 
+#                && $attributes['tbitskolabisdomainadmin'] == 'FALSE') {
+#            // drop the permissions on the domains
+#            $domains = $this->domainadmin_get_domains($user_dn);
+#            foreach ($domains as $domainname) {
+#                $domain = $this->domain_info($domainname);
+#                $domainadmins = $domain[key($domain)]['domainadmin'];
+#                if(($key = array_search($user_dn, $domainadmins)) !== false) {
+#                    unset($domainadmins[$key]);
+#                }
+#                $this->domain_admin_save($domain, key($domain), $domainadmins);
+#            }
+#        }
+
         return $result;
     }
 
@@ -1492,4 +1578,166 @@ class LDAP extends Net_LDAP3 {
 
         return $directory;
     }
+
+    private function ChangeDomainReadCapability($user, $domain, $action='add')
+    {
+        if (($tmpconn = ldap_connect($this->_current_host)) === false) {
+            return false;
+        }
+
+        if (ldap_bind($tmpconn, $_SESSION['user']->user_bind_dn, $_SESSION['user']->user_bind_pw) === false) {
+            ldap_close($tmpconn);
+            return false;
+        }
+
+        $domain_dn = $this->_standard_root_dn($domain);
+        $domain = str_replace(array(",dc=", "dc="), array(".",""), $domain_dn); 
+        $associateddomain_dn="associateddomain=$domain,cn=kolab,cn=config";
+        $info = array();
+        $info["aci"] = array();
+        if (!(($sr = ldap_read($tmpconn, $associateddomain_dn, "(aci=*)", array('aci'))) === false)) {
+            $entry = ldap_get_entries($tmpconn, $sr);
+            if ($entry['count'] > 0) {
+                for ($count = 0; $count < $entry[0]['aci']['count']; $count++) {
+                    if (strpos($entry[0]['aci'][$count], $user) === false) {
+                        $info['aci'][] = $entry[0]['aci'][$count];
+                    }
+                }
+            }
+        }
+
+        if ($action == 'add') {
+            $info["aci"][] = "(targetattr =\"*\")(version 3.0;acl \"$user\";allow (read,search) (userdn=\"ldap:///$user\");)";
+        }
+
+        if (ldap_modify($tmpconn, $associateddomain_dn, $info) === false) {
+            ldap_close($tmpconn);
+            return false;
+        }
+
+        ldap_close($tmpconn);
+        return true;
+    }
+
+    private function domain_admin_save($domain, $domain_dn, $domainadmins) {
+        if (is_string($domain)) {
+            $domain = $this->domain_info($domain);
+        }
+
+        if (!array_key_exists('associateddomain', $domain[$domain_dn])) {
+            // domain_dn is in this format:  associateddomain=atest1.de,cn=kolab,cn=config
+            $tmp=explode(",", $domain_dn);
+            $tmp=$tmp[0];
+            $tmp=explode("=", $tmp);
+            $domain[$domain_dn]["associateddomain"] = $tmp[1];
+        }
+
+        $currentdomain_dn = $this->_standard_root_dn($domain[$domain_dn]["associateddomain"]);
+        $currentdomain_da_dn = "cn=Directory Administrators,".$currentdomain_dn;
+
+        $domain_admins_result = $this->search($currentdomain_dn, "cn=Directory Administrators*", array("uniqueMember"));
+        if ($domain_admins_result != null && count($domain_admins_result) > 0) {
+            $domain_admins = $domain_admins_result->entries(true);
+        }
+
+        if (empty($domain_admins[$currentdomain_da_dn]["uniquemember"])) {
+            $domain_admins[$currentdomain_da_dn]["uniquemember"] = Array();
+        }
+
+        if (!is_array($domain_admins[$currentdomain_da_dn]["uniquemember"])) {
+            $domain_admins[$currentdomain_da_dn]["uniquemember"] =
+              (array)($domain_admins[$currentdomain_da_dn]["uniquemember"]);
+        }
+
+        if (empty($domainadmins)) {
+            $domainadmins = array();
+        }
+
+        if (!in_array('cn=Directory Manager', $domainadmins)) {
+            $domainadmins[] = 'cn=Directory Manager';
+        }
+
+        $info = array();
+        $info["uniquemember"] = array();
+        for ($count = 0; $count < count($domainadmins); $count++) {
+            $info["uniquemember"][] = $domainadmins[$count];
+
+            if (!in_array($domainadmins[$count], $domain_admins[$currentdomain_da_dn]["uniquemember"])) {
+                # add read permission to associateddomain in cn=kolab,cn=config
+                if (!$this->ChangeDomainReadCapability($domainadmins[$count], $domain[$domain_dn]["associateddomain"], 'add')) {
+                    return false;
+                }
+            }
+        }
+
+        # check for removed admins: remove also read permission from associateddomain in cn=kolab,cn=config
+        foreach ($domain_admins[$currentdomain_da_dn]["uniquemember"] as $oldadmin) {
+            if (!in_array($oldadmin, $domainadmins)) {
+                # drop read permission to associateddomain in cn=kolab,cn=config
+                if (!$this->ChangeDomainReadCapability($oldadmin, $domain[$domain_dn]["associateddomain"], 'remove')) {
+                    return false;
+                }
+            }
+        }
+        
+        $result = $this->modify_entry($currentdomain_da_dn, $domain_admins[$currentdomain_da_dn], $info);
+
+        if (!is_array($result)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    // returns an array with the domains that this domainadmin has access to
+    public function domainadmin_get_domains($domainadmin)
+    {
+        $filter = "(&(objectclass=domainrelatedobject)(aci=*".$domainadmin."*))";
+        $domains_result = $this->search($this->conf->get('domain_base_dn'), $filter, array("aci"));
+        if ($domains_result != null && count($domains_result) > 0) {
+            $domains = $domains_result->entries(true);
+            $result = array();
+            foreach (array_keys($domains) as $associateddomain) {
+                $domain = substr($associateddomain, strlen("associateddomain="));
+                $domain = substr($domain, 0, strpos($domain, ','));
+                $result[] = $domain;
+            }
+
+            return $result;
+        }
+
+        return array();
+    }
+
+    // get the value of the specified configuration variable, for the domain admin of the currently selected domain
+    public function domainadmin_get_configuration($current_domain, $config_flag)
+    {
+        $current_domain = $this->_standard_root_dn($current_domain);
+        $domaindetails = array_shift(array_values($this->domain_info($current_domain)));
+        $domainadmins = $domaindetails['domainadmin'];
+
+        unset($resultvalue);
+        unset($maxaccounts);
+        foreach ($domaindetails['domainadmin'] as $domainadmin) {
+            // ignore cn=Directory Manager
+            if ($domainadmin != $this->conf->get('bind_dn')) {
+                $userinfo = array_shift(array_values($this->user_info($domainadmin, array($config_flag))));
+                if (!empty($userinfo[$config_flag])) {
+                    // the domainadmin with the smallest amount of available accounts is the domainadmin that we use
+                    // this will ignore the super domain admins (resellers)
+                    if (empty($maxaccounts) || $maxaccounts > $userinfo['tbitskolabmaxaccounts']) {
+                        $maindomainadmin = $domainadmin;
+                        $maxaccounts = $userinfo['tbitskolabmaxaccounts'];
+                        $resultvalue = $userinfo[$config_flag];
+                    }
+                }
+            }
+        }
+
+        if (!isset($resultvalue)) {
+            return NULL;
+        }
+
+        return array('domainadmin' => $maindomainadmin, $config_flag => $resultvalue);
+    }
 }
diff --git a/lib/api/kolab_api_service_domain.php b/lib/api/kolab_api_service_domain.php
index 9781eeb..3738338 100644
--- a/lib/api/kolab_api_service_domain.php
+++ b/lib/api/kolab_api_service_domain.php
@@ -419,4 +419,25 @@ class kolab_api_service_domain extends kolab_api_service
 
         $role_service->role_add(null, $role);
     }
+
+    /**
+     * get some variables, specified in the TBits ISP LDAP attribute of the domain admin
+     *
+     * @param array $get   GET parameters
+     * @param array $post  POST parameters
+     *
+     * @return array|bool the value, False on error
+     */
+    public function domainadmin_info($getdata, $postdata)
+    {
+        Log::trace("domain.domainadmin_info(\$getdata = '" . var_export($getdata, TRUE) . "', \$postdata = '" . var_export($postdata, TRUE) . "')");
+
+        if (empty($getdata['variablename'])) {
+            Log::error("domain.domainadmin_info called without a variable name");
+            return false;
+        }
+        $variablename = $getdata['variablename'];
+
+        return Auth::get_instance()->domainadmin_get_configuration($_SESSION['user']->get_domain(), $variablename);
+    }
 }
diff --git a/lib/api/kolab_api_service_domain_types.php b/lib/api/kolab_api_service_domain_types.php
index 7ea999e..7786349 100644
--- a/lib/api/kolab_api_service_domain_types.php
+++ b/lib/api/kolab_api_service_domain_types.php
@@ -34,6 +34,11 @@ class kolab_api_service_domain_types extends kolab_api_service
             'associateddomain' => array(
                 'type' => 'list'
             ),
+            'domainadmin' => array(
+                'type' => 'list',
+                'autocomplete' => true,
+                'optional' => true,
+            ),
             'domainrelatedobject_only' => array(
                 'optional' => true,
             ),
diff --git a/lib/api/kolab_api_service_form_value.php b/lib/api/kolab_api_service_form_value.php
index 79f5fbd..48e017d 100644
--- a/lib/api/kolab_api_service_form_value.php
+++ b/lib/api/kolab_api_service_form_value.php
@@ -1153,6 +1153,78 @@ class kolab_api_service_form_value extends kolab_api_service
         );
     }
 
+    /**
+     * get the users that are domainadmins.
+     * We assume: all users of class tbitskolabdomainadmin, plus the Directory Manager
+     */
+    private function list_options_domainadmin($postdata, $attribs = array())
+    {
+        $auth = Auth::get_instance();
+        $conf = Conf::get_instance();
+        $all_domains   = $auth->list_domains();
+        $all_domains   = $all_domains['list'];
+        $dna           = $conf->get('domain_name_attribute');
+        $_domainadmins = array();
+        $domainAdminFilter = '(objectclass=tbitsKolabDomainAdmin)';
+
+        if (!empty($postdata['list'])) {
+            foreach ($all_domains as $domain_id => $domain_attrs) {
+                if (!is_array($domain_attrs[$dna])) {
+                    $domain_attrs[$dna] = (array)($domain_attrs[$dna]);
+                }
+
+                foreach ($postdata['list'] as $id => $v) {
+                    if ($v == "cn=Directory Manager") {
+                        $_domainadmins[$v] = "Directory Manager";
+                    }
+                }
+
+                $domain_dn = "dc=" . implode(',dc=', explode('.', $domain_attrs[$dna][0]));
+                $auth = Auth::get_instance($domain_dn);
+
+                if ($domainadmins = $auth->search($domain_dn, $domainAdminFilter, 'sub', array('dn', 'displayname', 'uid'))) {
+                    foreach ($domainadmins->entries(true) as $domainadmin_dn => $domainadmin_attrs) {
+                        $ret = $domainadmin_attrs['displayname'];
+                        $ret .= ' <'.$domainadmin_attrs['uid'].'@'.$domain_attrs[$dna][0].'>';
+                        foreach ($postdata['list'] as $id => $v) {
+                            if ($domainadmin_dn == $v) {
+                               $_domainadmins[$domainadmin_dn] = $ret;
+                            }
+                        }
+                    }
+                }
+            }
+            return $_domainadmins;
+        }
+
+        if (stripos("Directory Manager", $postdata['search']) !== false) {
+            $_domainadmins[$conf->get("bind_dn")] = "Directory Manager";
+        }
+
+        foreach ($all_domains as $domain_id => $domain_attrs) {
+            if (!is_array($domain_attrs[$dna])) {
+                $domain_attrs[$dna] = (array)($domain_attrs[$dna]);
+            }
+
+            $domain_dn = "dc=" . implode(',dc=', explode('.', $domain_attrs[$dna][0]));
+            $auth = Auth::get_instance($domain_dn);
+
+            if ($domainadmins = $auth->search($domain_dn, $domainAdminFilter, 'sub', array('dn', 'displayname', 'uid'))) {
+                foreach ($domainadmins->entries(true) as $domainadmin_dn => $domainadmin_attrs) {
+                    $ret = $domainadmin_attrs['displayname'];
+                    $ret .= ' <'.$domainadmin_attrs['uid'].'@'.$domain_attrs[$dna][0].'>';
+                    if (stripos($ret, $postdata['search']) !== false) {
+                        $_domainadmins[$domainadmin_dn] = $ret;
+                    }
+                }
+            }
+        }
+
+        // sort($_domainadmins);
+
+        return $_domainadmins;
+    }
+
     private function select_options_preferredlanguage($postdata, $attribs = array())
     {
         $options = $this->_select_options_from_db('preferredlanguage');
@@ -1311,7 +1383,7 @@ class kolab_api_service_form_value extends kolab_api_service
         return 'OK';
     }
 
-    private function validate_mailquota($value, $postdata = array(), $validation_type = null)
+    private function validate_quota($value, $postdata = array(), $validation_type = null)
     {
         // convert MB/GB into KB
         if (preg_match('/^([0-9]+)\s*(KB|MB|GB)$/i', $value, $m)) {
@@ -1321,10 +1393,24 @@ class kolab_api_service_form_value extends kolab_api_service
             case 'GB': $value = $m[1] * 1024 * 1024; break;
             }
         }
-
         return (string) intval($value);
     }
 
+    private function validate_mailquota($value, $postdata = array(), $validation_type = null)
+    {
+        return $this->validate_quota($value, $postdata, $validation_type);
+    }
+
+    private function validate_tbitskolaboverallquota($value, $postdata = array(), $validation_type = null)
+    {
+        return $this->validate_quota($value, $postdata, $validation_type);
+    }
+
+    private function validate_tbitskolabdefaultquota($value, $postdata = array(), $validation_type = null)
+    {
+        return $this->validate_quota($value, $postdata, $validation_type);
+    }
+
     private function validate_mailalternateaddress($value, $postdata = array(), $validation_type = null)
     {
         $conf = Conf::get_instance();
@@ -1710,6 +1796,21 @@ class kolab_api_service_form_value extends kolab_api_service
         if (in_array($email_domain, $this->_get_valid_domains($my_primary_domain))) {
             $valid = true;
         }
+        
+        if (!$valid) {
+            $auth = Auth::get_instance();
+
+            // check if domain of the email address is maintained by the same domain admin as the currently selected domain
+            // get the domain admin of the currently selected domain
+            $result = $auth->domainadmin_get_configuration($_SESSION['user']->get_domain(), 'uid');
+
+            if (isset($result)) {
+                $valid_domains = $auth->domainadmin_get_domains($result['domainadmin']);
+                if (in_array($email_domain, $valid_domains)) {
+                    $valid = true;
+                }
+            }
+        }
 
         if ($valid) {
             Log::trace("Found email address to be in one of my domains.");
diff --git a/lib/client/kolab_client_task_domain.php b/lib/client/kolab_client_task_domain.php
index 22cce3d..54fe81b 100644
--- a/lib/client/kolab_client_task_domain.php
+++ b/lib/client/kolab_client_task_domain.php
@@ -110,6 +110,7 @@ class kolab_client_task_domain extends kolab_client_task
         $sections = array(
             'system'   => 'domain.system',
             'other'    => 'domain.other',
+            'admins'    => 'domain.admins',
         );
 
         // field-to-section map and fields order
@@ -118,6 +119,7 @@ class kolab_client_task_domain extends kolab_client_task
             'type_id_name'      => 'system',
             'associateddomain'  => 'system',
             'inetdomainstatus'  => 'system',
+            'domainadmin'       => 'admins',
         );
 
         // Prepare fields
@@ -143,6 +145,15 @@ class kolab_client_task_domain extends kolab_client_task
             }
         }
 
+        // load all domain admins
+        $param = array();
+        $param['attributes'] = array('domainadmin');
+        $resp = $this->api_post('form_value.select_options', null, $param);
+        $resp = $resp->get('domainadmin');
+
+        $default         = $resp['default'];
+        $data['domainadmin_options'] = $resp['list'];
+
         // Create form object and populate with fields
         $form = $this->form_create('domain', $attribs, $sections, $fields, $fields_map, $data, $add_mode, $title);
 
diff --git a/lib/client/kolab_client_task_user.php b/lib/client/kolab_client_task_user.php
index 9171c7f..39d8557 100644
--- a/lib/client/kolab_client_task_user.php
+++ b/lib/client/kolab_client_task_user.php
@@ -88,6 +88,7 @@ class kolab_client_task_user extends kolab_client_task
             'contact_info'  => 'user.contact_info',
             'system'        => 'user.system',
             'config'        => 'user.config',
+            'domainadmin'   => 'user.domainadmin',
             'asterisk'      => 'user.asterisk',
             'other'         => 'user.other',
         );
@@ -143,6 +144,10 @@ class kolab_client_task_user extends kolab_client_task
             'kolabhomeserver'           => 'config',
             'mailhost'                  => 'config',
             'mailquota'                 => 'config',
+#           'tbitskolabisdomainadmin'   => 'domainadmin',
+            'tbitskolabmaxaccounts'     => 'domainadmin',
+            'tbitskolaboverallquota'    => 'domainadmin',
+            'tbitskolabdefaultquota'    => 'domainadmin',
             'cyrususerquota'            => 'config',
             'kolabfreebusyfuture'       => 'config',
             'kolabinvitationpolicy'     => 'config',
diff --git a/lib/kolab_api_service.php b/lib/kolab_api_service.php
index c098de1..582c996 100644
--- a/lib/kolab_api_service.php
+++ b/lib/kolab_api_service.php
@@ -111,6 +111,10 @@ abstract class kolab_api_service
             return key($object_types);
         }
 
+        # sort object types by the key: Kolab user should win over Domain Admin, because it comes first
+        # there are only additional fields, so a kolab user would be displayed as admin, when sorting by type name
+        ksort($object_types);
+
         $object_class = array_map('strtolower', $object_class);
         $object_keys  = array_diff(array_keys($attributes), array(self::unique_attribute()));
         $keys_count   = count($object_keys);
@@ -214,6 +218,14 @@ abstract class kolab_api_service
                 }
             }
 
+            // if this is a user, make sure that differences (eg. object class tbitsKolabDomainAdmin) are weighted more,
+            // so that a difference of 0 is better than a difference of 1
+            if ($object_name == 'user') {
+                if ($differences > 0) {
+                   $elem_score -= 2;
+                }
+            }
+
             // degrade class score if object contains more attributes
             // than defined in object type
             if ($keys_count && $elem_keys_score < $keys_count) {
diff --git a/lib/kolab_client_task.php b/lib/kolab_client_task.php
index c35df42..e4d4727 100644
--- a/lib/kolab_client_task.php
+++ b/lib/kolab_client_task.php
@@ -1200,7 +1200,8 @@ class kolab_client_task
                 }
             }
             else {
-                if (in_array('add', $entry_rights) && in_array('delete', $entry_rights)) {
+                if ((strpos($idx, "tbits") != 0) && in_array('add', $entry_rights) && in_array('delete', $entry_rights)) {
+
                     if ($admin_auto_fields_rw) {
                         $fields[$idx]['readonly'] = false;
                     }
diff --git a/lib/kolab_form.php b/lib/kolab_form.php
index 9b5b010..5d8b99a 100644
--- a/lib/kolab_form.php
+++ b/lib/kolab_form.php
@@ -126,6 +126,8 @@ class kolab_form
         $hidden  = array();
 
         if (!empty($this->sections)) {
+            $hideDomainAdminValues = false;
+
             foreach ($this->sections as $set_idx => $set) {
                 $rows = array();
 
@@ -134,6 +136,17 @@ class kolab_form
                         continue;
                     }
 
+                    if ($element['section'] == 'domainadmin') {
+                        if ($element['name'] == 'tbitskolabisdomainadmin') {
+                            if ($element['readonly'] == 1 && $element['checked'] != 1) {
+                                $hideDomainAdminValues = true;
+                            }
+                        }
+                        if ($hideDomainAdminValues) {
+//                            continue;
+                        }
+                    }
+
                     if ($element['type'] == self::INPUT_HIDDEN) {
                         $hidden[] = self::get_element($element);
                         continue;
@@ -242,7 +255,7 @@ class kolab_form
                 'content' => $element['label'],
                 ), true)
                 . kolab_html::div(array(
-                    'class'   => $class,
+                    'class'   => $class.' style'.$element['name'],
                     'content' => $content,
                 ));
         }
diff --git a/lib/locale/de_DE.php b/lib/locale/de_DE.php
index 9880b0a..623a84d 100644
--- a/lib/locale/de_DE.php
+++ b/lib/locale/de_DE.php
@@ -448,3 +448,12 @@ $LANG['user.uidnumber'] = 'Benutzer ID Nummer';
 $LANG['welcome'] = 'Willkommen bei der Kolab Groupware Server-Wartung';
 
 $LANG['yes'] = 'ja';
+
+$LANG['user.domainadmin'] = 'Domain Administrator';
+$LANG['domain.admins'] = 'Domain Administratoren';
+$LANG['domain.domainadmin'] = 'Administratoren für diese Domain';
+#$LANG['user.tbitskolabisdomainadmin'] = 'Ist Domain Administrator';
+$LANG['user.tbitskolabmaxaccounts'] = 'Maximale Anzahl von Benutzerkonten';
+$LANG['user.tbitskolaboverallquota'] = 'Gesamtquota verfügbar';
+$LANG['user.tbitskolabdefaultquota'] = 'Voreinstellung Quota für Benutzerkonten';
+
diff --git a/lib/locale/en_US.php b/lib/locale/en_US.php
index 01a9660..f9c204c 100644
--- a/lib/locale/en_US.php
+++ b/lib/locale/en_US.php
@@ -129,10 +129,12 @@ $LANG['deleting'] = 'Deleting data...';
 
 $LANG['domain.add'] = 'Add Domain';
 $LANG['domain.add.success'] = 'Domain created successfully.';
+$LANG['domain.admins'] = 'Domain Administrators';
 $LANG['domain.associateddomain'] = 'Domain name(s)';
 $LANG['domain.delete.confirm'] = 'Are you sure, you want to delete this domain?';
 $LANG['domain.delete.force'] = "There are users assigned to this domain.\nAre you sure, you want to delete this domain and all assigned objects?";
 $LANG['domain.delete.success'] = 'Domain deleted successfully.';
+$LANG['domain.domainadmin'] = 'Administrators for this domain';
 $LANG['domain.edit'] = 'Edit domain';
 $LANG['domain.edit.success'] = 'Domain updated successfully.';
 $LANG['domain.inetdomainbasedn'] = 'Custom Root DN';
@@ -384,6 +386,7 @@ $LANG['user.country.desc'] = '2 letter code from ISO 3166-1';
 $LANG['user.delete.confirm'] = 'Are you sure, you want to delete this user?';
 $LANG['user.delete.success'] = 'User deleted successfully.';
 $LANG['user.displayname'] = 'Display name';
+$LANG['user.domainadmin'] = 'Domain Administrator';
 $LANG['user.edit.success'] = 'User updated successfully.';
 $LANG['user.fax'] = 'Fax number';
 $LANG['user.fbinterval'] = 'Free-Busy interval';
@@ -437,6 +440,10 @@ $LANG['user.sn'] = 'Surname';
 $LANG['user.street'] = 'Street';
 $LANG['user.system'] = 'System';
 $LANG['user.telephonenumber'] = 'Phone Number';
+#$LANG['user.tbitskolabisdomainadmin'] = 'Is Domain Administrator';
+$LANG['user.tbitskolabmaxaccounts'] = 'Maximum number of accounts';
+$LANG['user.tbitskolaboverallquota'] = 'Overall Quota assigned';
+$LANG['user.tbitskolabdefaultquota'] = 'Default Quota for user accounts';
 $LANG['user.title'] = 'Job Title';
 $LANG['user.type_id'] = 'Account type';
 $LANG['user.uid'] = 'Unique identity (UID)';
diff --git a/public_html/js/kolab_admin.js b/public_html/js/kolab_admin.js
index 0454ce4..fcc962c 100644
--- a/public_html/js/kolab_admin.js
+++ b/public_html/js/kolab_admin.js
@@ -657,6 +657,8 @@ function kolab_admin()
     ul.innerHTML = '';
     // move the results pane right under the input box
     this.ac_pane.css({left: pos.left + 'px', top: (pos.top + this.ac_input.offsetHeight - 1)+'px', display: 'none'});
+    // same width as input box
+    this.ac_pane.css({width: ($(this.ac_input).width() - 18) + 'px'});
 
     // add each result line to the list
     for (i in result) {
@@ -735,6 +737,19 @@ function kolab_admin()
   /*********            Forms widgets              *********/
   /*********************************************************/
 
+  function disableDomainAdminAttributes()
+  {
+      disable = false;
+      if (!isdomainadmin.is(":checked")) {
+        disable = 'disabled';
+      }
+      $('input[name="tbitskolabmaxaccounts"]').prop('disabled', disable);
+      $('input[name="tbitskolaboverallquota"]').prop('disabled', disable);
+      $('select[name="tbitskolaboverallquota-unit"]').prop('disabled', disable);
+      $('input[name="tbitskolabdefaultquota"]').prop('disabled', disable);
+      $('select[name="tbitskolabdefaultquota-unit"]').prop('disabled', disable);
+  }
+
   // Form initialization
   this.form_init = function(id)
   {
@@ -761,6 +776,12 @@ function kolab_admin()
     aci_fields.each(function() { kadm.form_aci_element_wrapper(this); });
     if (aci_fields.length)
       this.form_aci_init();
+
+    isdomainadmin = $('input[name="tbitskolabisdomainadmin"]');
+    if (isdomainadmin) {
+        //disableDomainAdminAttributes();
+        //isdomainadmin.change(disableDomainAdminAttributes);
+    }
   };
 
   // Form serialization
diff --git a/public_html/skins/default/style.css b/public_html/skins/default/style.css
index 129dae7..5b75db2 100644
--- a/public_html/skins/default/style.css
+++ b/public_html/skins/default/style.css
@@ -921,4 +921,17 @@ body.signup #footer {
 
 body.signup #message {
   top: 55px;
-}
\ No newline at end of file
+}
+
+td.styledomainadmin span.listarea {
+  width: 500px;
+}
+
+td.styledomainadmin span.listelement input {
+  width: 500px;
+}
+
+td.styledomainadmin .autocomplete > span.listelement input {
+  width: 500px;
+}
+
